datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  isTutorialFinished Boolean             @default(false)
  workspaces         UsersOnWorkspaces[]

  creatorOnTasks  Task[] @relation("TasksCreator")
  assigneeOnTasks Task[] @relation("TasksAssignee")
  updaterOnTasks  Task[] @relation("TasksUpdater")
  deleterOnTasks  Task[] @relation("TasksDeleter")

  // Required columns for NextAuth 
  image         String? // Should be set with the avatar image from the registered auth provider
  email         String?   @unique // Should be set by the auth provider
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Workspace {
  id          String              @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  users       UsersOnWorkspaces[]
  tasks       Task[]
}

model UsersOnWorkspaces {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  isAdmin     Boolean

  @@id([userId, workspaceId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus
  createdAt   DateTime   @default(now())
  dueDate     DateTime?
  deletedAt   DateTime?

  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  createdBy     User  @relation(name: "TasksCreator", fields: [createdById], references: [id])
  assignee      User? @relation(name: "TasksAssignee", fields: [assigneeId], references: [id])
  lastUpdatedBy User? @relation(name: "TasksUpdater", fields: [lastUpdatedById], references: [id])
  deletedBy     User? @relation(name: "TasksDeleter", fields: [deletedById], references: [id])

  createdById     String
  assigneeId      String?
  lastUpdatedById String?
  deletedById     String?
}
